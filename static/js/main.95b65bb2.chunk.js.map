{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/ErrorBoundary.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","props","className","src","id","alt","name","email","CardList","robots","map","user","i","key","SearchBox","type","placeholder","onChange","searchChange","Scroll","style","overflowY","border","height","children","ErrorBoundary","state","hasError","this","setState","React","Component","App","onSearchChange","event","searchfield","target","value","fetch","then","response","json","users","filterRobots","filter","robot","toLowerCase","includes","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2OAmBeA,EAjBF,SAACC,GACV,OACA,yBAAKC,UAAU,mDACX,6BACI,yBAAKC,IAAG,+BAA0BF,EAAMG,GAAhC,iBAAmDC,IAAI,WAC/D,6BACI,4BAAKJ,EAAMK,MACX,2BAAIL,EAAMM,WCGXC,EATE,SAAC,GAId,OAJ0B,EAAXC,OACWC,KAAI,SAACC,EAAKC,GAChC,OAAO,kBAAC,EAAD,CAAMC,IAAKD,EAAGR,GAAIO,EAAKP,GAAIE,KAAMK,EAAKL,KAAMC,MAAOI,EAAKJ,YCUxDO,EAbG,SAACb,GACf,OACI,yBAAKC,UAAU,OACX,2BACIA,UAAU,mCACVa,KAAK,SACLC,YAAY,eACZC,SAAUhB,EAAMiB,iBCGjBC,EATA,SAAClB,GACZ,OACI,yBAAKmB,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,UAChEtB,EAAMuB,WCoBJC,E,YAtBX,WAAYxB,GAAO,IAAD,8BACd,4CAAMA,KACDyB,MAAO,CACRC,UAAU,GAHA,E,iFAOdC,KAAKC,SAAS,CAACF,UAAU,M,+BAGzB,OAAGC,KAAKF,MAAMC,SAEN,6BACI,4DAIDC,KAAK3B,MAAMuB,a,GAlBFM,IAAMC,WC+CnBC,G,kBAxCX,aAAe,IAAD,8BACV,+CAYJC,eAAiB,SAACC,GACd,EAAKL,SAAS,CAAEM,YAAaD,EAAME,OAAOC,SAZ1C,EAAKX,MAAQ,CACTjB,OAAQ,GACR0B,YAAa,IAJP,E,iFAOO,IAAD,OAChBG,MAAM,8CACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKb,SAAS,CAAEpB,OAAQiC,S,+BAOrC,IAAD,OAECC,EAAef,KAAKF,MAAMjB,OAAOmC,QAAO,SAAAC,GAC1C,OAAOA,EAAMvC,KAAKwC,cAAcC,SAAS,EAAKrB,MAAMS,YAAYW,kBAGpE,OACI,yBAAK5C,UAAU,MACX,6BACI,wBAAIA,UAAU,MAAd,kBAGJ,kBAAC,EAAD,CAAWgB,aAAcU,KAAKK,iBAC9B,kBAAC,EAAD,KACI,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAUxB,OAAQkC,W,GAjCxBb,IAAMC,YCGJiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OACL,kBAAC,EAAD,MACEC,SAASC,eAAe,SDyHxB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpB,MAAK,SAAAqB,GACjCA,EAAaC,iB","file":"static/js/main.95b65bb2.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = (props) =>{\n    return (\n    <div className=\"tc bg-light-green dib pa3 ma2 grow bw2 shadow-5\">\n        <div>\n            <img src={`https://robohash.org/${props.id}?size=300x300`} alt=\"robots\"/>\n            <div>\n                <h2>{props.name}</h2>\n                <p>{props.email}</p>\n            </div>\n        </div>\n    </div>\n    );\n    \n}\n\n\n\nexport default Card;","import React from 'react'\nimport Card from './Card'\n\nconst CardList = ({robots}) =>{\n    const cardsArray = robots.map((user,i)=>{\n        return <Card key={i} id={user.id} name={user.name} email={user.email} />\n    });\n    return (\n        cardsArray\n    );\n}\n\nexport default CardList;","import React from 'react'\n\nconst SearchBox = (props) => {\n    return (\n        <div className=\"pa2\">\n            <input\n                className=\"pa3 ba b--green bg-lightest-blue\"\n                type=\"search\"\n                placeholder=\"search robos\"\n                onChange={props.searchChange}\n            />\n        </div>\n    );\n}\n\nexport default SearchBox;","import React from 'react';\n\n\nconst Scroll = (props) =>{\n    return (\n        <div style={{overflowY: 'scroll', border: '1px solid black', height: '500px'}}>\n            {props.children}\n        </div>\n       \n    );\n}\n\nexport default Scroll;","import React from 'react';\n\n\nclass ErrorBoundary extends React.Component {\n    constructor(props){\n        super(props);\n        this.state ={\n            hasError: false\n        }\n    }\n    componentDidCatch(){\n        this.setState({hasError: true});\n    }\n    render(){\n        if(this.state.hasError){\n            return(\n                <div>\n                    <h1>Ooops... this is not good!!</h1>\n                </div>\n            )\n        }else{\n            return this.props.children;\n        }\n    }\n}\n\nexport default ErrorBoundary;","import React from 'react'\nimport CardList from '../components/CardList'\nimport SearchBox from '../components/SearchBox'\nimport Scroll from '../components/Scroll'\nimport ErrorBoundary from './ErrorBoundary'\nimport './App.css'\n\n\n\nclass App extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            robots: [],\n            searchfield: ''\n        }\n    }\n    componentDidMount() {\n        fetch('https://jsonplaceholder.typicode.com/users')\n            .then(response => response.json())\n            .then(users => this.setState({ robots: users }));\n    }\n\n    onSearchChange = (event) => {\n        this.setState({ searchfield: event.target.value });\n\n    }\n    render() {\n\n        const filterRobots = this.state.robots.filter(robot => {\n            return robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\n        });\n\n        return (\n            <div className=\"tc\">\n                <div>\n                    <h1 className=\"f1\">Robot Friends</h1>\n                </div>\n\n                <SearchBox searchChange={this.onSearchChange} />\n                <Scroll>\n                    <ErrorBoundary>\n                        <CardList robots={filterRobots} />\n                    </ErrorBoundary>\n                </Scroll>\n            </div>\n        )\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App'\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\n\nReactDOM.render(\n    <App />\n    , document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}